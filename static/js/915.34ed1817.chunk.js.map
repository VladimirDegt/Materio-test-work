{"version":3,"file":"static/js/915.34ed1817.chunk.js","mappings":"kUAgBaA,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MACTC,GAAcC,EAAAA,EAAAA,KAAdD,UAsBR,OACE,gCACGA,IAAa,6CACd,SAAC,IAAD,CAAME,GAAG,WAAWC,MAAM,SAASC,QAAQ,SAA3C,UACE,SAAC,KAAD,CAAKF,GAAG,QAAQG,EAAG,EAAGC,QAAS,EAAGC,EAAE,OAApC,UACE,SAAC,KAAD,CAAQC,cAXM,CACpBC,KAAM,GACNC,MAAO,GACPC,SAAU,IAQkCC,SAzBzB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BhB,GACEiB,EAAAA,EAAAA,IAAS,CACPN,KAAMI,EAAOJ,KACbC,MAAOG,EAAOH,MACdC,SAAUE,EAAOF,YAGlBK,SACAC,MAAK,kBAAMC,EAAAA,OAAAA,QAAe,sLAArB,IACLC,OAAM,kBAAMD,EAAAA,OAAAA,QAAe,iJAArB,IACTJ,GACD,EAaO,SACG,gBAAGM,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,QAAzB,OACC,iBAAMV,SAAUQ,EAAhB,UACE,UAAC,IAAD,CAAQG,QAAS,EAAGpB,MAAM,aAA1B,WACE,UAAC,KAAD,YACE,SAAC,IAAD,CAAWqB,QAAQ,OAAnB,mBACA,SAAC,KAAD,CACEC,GAAIC,EAAAA,EACJC,GAAG,OACHlB,KAAK,OACLmB,KAAK,OACLC,QAAQ,SACRC,SAAU,SAAAC,GACR,IAAIC,EAMJ,OAJID,EAAME,OAAS,IACjBD,EAAQ,2CAGHA,CACR,KAEH,SAAC,KAAD,UAAmBX,EAAOZ,WAE5B,UAAC,KAAD,YACE,SAAC,IAAD,CAAWe,QAAQ,QAAnB,4BACA,SAAC,KAAD,CACEC,GAAIC,EAAAA,EACJC,GAAG,QACHlB,KAAK,QACLmB,KAAK,QACLC,QAAQ,YAEV,SAAC,KAAD,UAAmBR,EAAOX,YAE5B,UAAC,KAAD,CACEwB,YAAab,EAAOV,UAAYW,EAAQX,SAD1C,WAGE,SAAC,IAAD,CAAWa,QAAQ,WAAnB,uBACA,SAAC,KAAD,CACEC,GAAIC,EAAAA,EACJC,GAAG,WACHlB,KAAK,WACLmB,KAAK,WACLC,QAAQ,SACRC,SAAU,SAAAC,GACR,IAAIC,EAMJ,OAJID,EAAME,OAAS,IACjBD,EAAQ,+CAGHA,CACR,KAEH,SAAC,KAAD,UAAmBX,EAAOV,eAE5B,SAAC,IAAD,CAAQiB,KAAK,SAASO,YAAY,OAAOC,MAAM,OAA/C,uBAxDL,UAmEZ,E,UC9Gc,SAASC,IACtB,OACE,4BACE,SAACC,EAAA,EAAD,WACE,+CAEF,SAACzC,EAAD,MAGL,C","sources":["components/RegisterForm/RegisterForm.jsx","pages/Register/Register.jsx"],"sourcesContent":["import { Notify } from 'notiflix';\nimport { useDispatch } from 'react-redux';\nimport { Field, Formik } from 'formik';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\nimport { register } from 'redux/auth/operations';\nimport { useAuth } from 'components/hooks/useAuth';\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  const { isLoading } = useAuth();\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(\n      register({\n        name: values.name,\n        email: values.email,\n        password: values.password,\n      })\n    )\n      .unwrap()\n      .then(() => Notify.success('Ви зареєстровані. Ласкаво просимо!'))\n      .catch(() => Notify.failure('Такий користувач вже існує!'));\n    resetForm();\n  };\n\n  const initialValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n\n  return (\n    <>\n      {isLoading && <p>Registrations...</p>}\n      <Flex bg=\"gray.100\" align=\"center\" justify=\"center\">\n        <Box bg=\"white\" p={8} rounded={4} w=\"50vh\">\n          <Formik initialValues={initialValues} onSubmit={handleSubmit}>\n            {({ handleSubmit, errors, touched }) => (\n              <form onSubmit={handleSubmit}>\n                <VStack spacing={4} align=\"flex-start\">\n                  <FormControl>\n                    <FormLabel htmlFor=\"name\">Name</FormLabel>\n                    <Field\n                      as={Input}\n                      id=\"name\"\n                      name=\"name\"\n                      type=\"name\"\n                      variant=\"filled\"\n                      validate={value => {\n                        let error;\n\n                        if (value.length < 4) {\n                          error = 'Name must contain at least 4 characters';\n                        }\n\n                        return error;\n                      }}\n                    />\n                    <FormErrorMessage>{errors.name}</FormErrorMessage>\n                  </FormControl>\n                  <FormControl>\n                    <FormLabel htmlFor=\"email\">Email Address</FormLabel>\n                    <Field\n                      as={Input}\n                      id=\"email\"\n                      name=\"email\"\n                      type=\"email\"\n                      variant=\"filled\"\n                    />\n                    <FormErrorMessage>{errors.email}</FormErrorMessage>\n                  </FormControl>\n                  <FormControl\n                    isInvalid={!!errors.password && touched.password}\n                  >\n                    <FormLabel htmlFor=\"password\">Password</FormLabel>\n                    <Field\n                      as={Input}\n                      id=\"password\"\n                      name=\"password\"\n                      type=\"password\"\n                      variant=\"filled\"\n                      validate={value => {\n                        let error;\n\n                        if (value.length < 6) {\n                          error = 'Password must contain at least 6 characters';\n                        }\n\n                        return error;\n                      }}\n                    />\n                    <FormErrorMessage>{errors.password}</FormErrorMessage>\n                  </FormControl>\n                  <Button type=\"submit\" colorScheme=\"blue\" width=\"full\">\n                    Login\n                  </Button>\n                </VStack>\n              </form>\n            )}\n          </Formik>\n        </Box>\n      </Flex>\n    </>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { Helmet } from 'react-helmet';\n\nexport default function RegisterPage() {\n  return (\n    <div>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </div>\n  );\n}\n"],"names":["RegisterForm","dispatch","useDispatch","isLoading","useAuth","bg","align","justify","p","rounded","w","initialValues","name","email","password","onSubmit","values","resetForm","register","unwrap","then","Notify","catch","handleSubmit","errors","touched","spacing","htmlFor","as","Input","id","type","variant","validate","value","error","length","isInvalid","colorScheme","width","RegisterPage","Helmet"],"sourceRoot":""}