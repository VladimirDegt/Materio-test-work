{"version":3,"file":"static/js/98.3c90ff0a.chunk.js","mappings":"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","sources":["utils/display-flex.js","components/Contacts/Contacts.styled.jsx","icons/delete-icon.js","icons/change-svg.js","redux/contacts/selectors.js","components/ModalChange/ModalChange.jsx","components/Contacts/Contacts.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/NewContactBtn/NewContactBtn.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { css } from '@emotion/react';\n\nexport const displayFlex = css`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n`;\n","import styled from '@emotion/styled';\nimport { displayFlex } from 'utils/display-flex';\n\nexport const StyledSection = styled.section`\n  ${displayFlex}\n  gap: 5px;\n`;\n\nexport const StyledContainerTable = styled.table`\n  display: flex;\n  flex-direction: column;\n  padding: 0;\n  margin: 10px auto;\n  border-collapse: collapse;\n\n  thead th {\n    text-align: center;\n  }\n\n  th,\n  td {\n    border: 1px solid #2e2f42;\n    padding: 8px;\n  }\n`;\n\nexport const StyledFirstRowHead = styled.th`\n  width: 300px;\n`;\nexport const StyledSecondRowHead = styled.th`\n  width: 200px;\n  @media (max-width: 1200px) {\n    display: none;\n  }\n`;\nexport const StyledThirdRowHead = styled.th`\n  width: 200px;\n  @media (max-width: 768px) {\n    display: none;\n  }\n`;\nexport const StyledFirstRow = styled.td`\n  width: 300px;\n  font-size: 16px;\n  weight: 500;\n  color: #0000ff;\n  cursor: pointer;\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  :hover,\n  :focus {\n    color: #6699ff;\n  }\n`;\nexport const StyledSecondRow = styled.td`\n  width: 200px;\n  text-align: center;\n  @media (max-width: 1200px) {\n    display: none;\n  }\n`;\nexport const StyledThirdRow = styled.td`\n  width: 200px;\n  text-align: center;\n  @media (max-width: 768px) {\n    display: none;\n  }\n`;\nexport const StyledChangeBtn = styled.button`\n  border: none;\n  background-color: inherit;\n  cursor: pointer;\n`;\n","import * as React from \"react\";\n\nfunction IconDeleteBin5Fill(props) {\n  return (\n    <svg\n      viewBox=\"0 0 24 24\"\n      fill=\"#FF0000\"\n      height=\"25px\"\n      width=\"25px\"\n      {...props}\n    >\n      <path fill=\"none\" d=\"M0 0h24v24H0z\" />\n      <path d=\"M4 8h16v13a1 1 0 01-1 1H5a1 1 0 01-1-1V8zm3-3V3a1 1 0 011-1h8a1 1 0 011 1v2h5v2H2V5h5zm2-1v1h6V4H9zm0 8v6h2v-6H9zm4 0v6h2v-6h-2z\" />\n    </svg>\n  );\n}\n\nexport default IconDeleteBin5Fill;","import * as React from \"react\";\n\nfunction IconWrite(props) {\n  return (\n    <svg\n      viewBox=\"0 -3 22 24\"\n      fill=\"#000000\"\n      height=\"30px\"\n      width=\"30px\"\n      {...props}\n    >\n      <g\n        fill=\"none\"\n        fillRule=\"evenodd\"\n        stroke=\"#00CC33\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      >\n        <path d=\"M17 4a2.121 2.121 0 010 3l-9.5 9.5-4 1 1-3.944 9.504-9.552a2.116 2.116 0 012.864-.125zM9.5 17.5h8M15.5 6.5l1 1\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default IconWrite;","export const selectContactsState = state => state.contacts;\n\nexport const selectFilterState = state => state.filters;","import { Formik, Field } from 'formik';\nimport { useEffect, useState } from 'react';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  VStack,\n  useDisclosure,\n} from '@chakra-ui/react';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n} from '@chakra-ui/react';\nimport { Notify } from 'notiflix';\nimport { useDispatch } from 'react-redux';\nimport { updateContact } from 'redux/contacts/operations';\n\nexport function ModalChange(props) {\n  const dispatch = useDispatch();\n  const [id] = useState(props.id);\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  useEffect(() => {\n    onOpen();\n  }, [onOpen]);\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(\n      updateContact({\n        id,\n        name: values.name,\n        number: values.number,\n      })\n    )\n      .unwrap()\n      .then(() => Notify.success('Контакт оновлено'))\n      .catch(error => Notify.failure('Упс, щось пішло не так'));\n    resetForm();\n    onClose();\n  };\n\n  const initialValues = {\n    name: props.name,\n    number: props.number,\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered size=\"sm\">\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Change contact</ModalHeader>\n        <ModalCloseButton />\n\n        <ModalBody>\n          <Flex bg=\"gray.100\" align=\"center\" justify=\"center\" h=\"65vh\">\n            <Box bg=\"white\" p={8} rounded={4} w=\"50vh\">\n              <Formik initialValues={initialValues} onSubmit={handleSubmit}>\n                {({ handleSubmit, errors, touched }) => (\n                  <form onSubmit={handleSubmit}>\n                    <VStack spacing={4} align=\"flex-start\">\n                      <FormControl isInvalid={!!errors.name && touched.name}>\n                        <FormLabel htmlFor=\"name\">Name</FormLabel>\n                        <Field\n                          as={Input}\n                          id=\"name\"\n                          name=\"name\"\n                          type=\"name\"\n                          variant=\"filled\"\n                          validate={value => {\n                            let error;\n\n                            if (value.length < 4) {\n                              error = 'Name must contain at least 4 characters';\n                            }\n\n                            return error;\n                          }}\n                        />\n                      </FormControl>\n                      <FormControl\n                        isInvalid={!!errors.number && touched.number}\n                      >\n                        <FormLabel htmlFor=\"number\">Number</FormLabel>\n                        <Field\n                          as={Input}\n                          id=\"number\"\n                          name=\"number\"\n                          type=\"number\"\n                          variant=\"filled\"\n                          validate={value => {\n                            let error;\n\n                            if (value.length < 6) {\n                              error =\n                                'Number must contain at least 6 characters';\n                            }\n\n                            return error;\n                          }}\n                        />\n                        <FormErrorMessage>{errors.password}</FormErrorMessage>\n                      </FormControl>\n                      <Button type=\"submit\" colorScheme=\"blue\" width=\"full\">\n                        Update\n                      </Button>\n                    </VStack>\n                  </form>\n                )}\n              </Formik>\n            </Box>\n          </Flex>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  TableContainer,\n} from '@chakra-ui/react';\nimport { StyledSection, StyledChangeBtn } from './Contacts.styled';\nimport IconDeleteBin5Fill from 'icons/delete-icon';\nimport IconWrite from 'icons/change-svg';\nimport { deleteContact, getContact } from 'redux/contacts/operations';\nimport {\n  selectContactsState,\n  selectFilterState,\n} from 'redux/contacts/selectors';\nimport { ModalChange } from 'components/ModalChange/ModalChange';\n\nfunction Contacts() {\n  const [isOpenModal, setIsOpenModal] = useState(false);\n  const [id, setId] = useState('');\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const { items, isLoading } = useSelector(selectContactsState);\n  const { filter } = useSelector(selectFilterState);\n\n  const visibaleContact =\n    filter === ''\n      ? items\n      : items.filter(item =>\n          item.name.toLowerCase().includes(filter.toLowerCase())\n        );\n\n  useEffect(() => {\n    dispatch(getContact());\n  }, [dispatch]);\n\n  const onDeleteContact = id => dispatch(deleteContact(id));\n\n  function handleModalOpen() {\n    setIsOpenModal(true);\n  }\n\n  function modalClose() {\n    setIsOpenModal(false);\n  }\n\n  const onChangeContact = (id, name, number) => {\n    setId(id);\n    setName(name);\n    setNumber(number);\n    handleModalOpen();\n  };\n\n  return (\n    <StyledSection>\n      {isLoading && <p>Loading contacts...</p>}\n      <TableContainer>\n        <Table variant=\"simple\">\n          <Thead>\n            <Tr>\n              <Th>Name</Th>\n              <Th>Phone</Th>\n            </Tr>\n          </Thead>\n          <Tbody>\n            {visibaleContact.map(item => (\n              <Tr key={item.id}>\n                <Td>{item.name}</Td>\n                <Td>{item.number}</Td>\n                <Td>\n                  <StyledChangeBtn\n                    type=\"button\"\n                    onClick={() =>\n                      onChangeContact(item.id, item.name, item.number)\n                    }\n                  >\n                    <IconWrite />\n                  </StyledChangeBtn>\n                </Td>\n                <Td>\n                  <StyledChangeBtn\n                    type=\"button\"\n                    onClick={() => onDeleteContact(item.id)}\n                  >\n                    <IconDeleteBin5Fill />\n                  </StyledChangeBtn>\n                </Td>\n              </Tr>\n            ))}\n          </Tbody>\n        </Table>\n      </TableContainer>\n      {isOpenModal && (\n        <ModalChange\n          modalClose={modalClose}\n          id={id}\n          name={name}\n          number={number}\n        />\n      )}\n    </StyledSection>\n  );\n}\n\nexport default Contacts;\n","import styled from '@emotion/styled';\nimport { Form } from 'formik';\nimport { DebounceInput } from 'react-debounce-input';\nimport { displayFlex } from 'utils/display-flex';\n\nexport const StyledForm = styled(Form)`\n  ${displayFlex}\n  gap: 5px;\n  border: 1px solid grey;\n  border-radius: 4px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n`\nexport const StyledInput = styled(DebounceInput)`\n  padding: 8px;\n  border-radius: 4px;\n`","import { Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { StyledForm, StyledInput } from './Filter.styled';\nimport { filterContact } from 'redux/contacts/filterReducer';\n\nfunction Filter() {\n  const dispatch = useDispatch();\n\n  return (\n    <Formik initialValues={{ vidibleContacts: '' }}>\n      {({ values, setFieldValue }) => (\n        <StyledForm>\n          <label htmlFor=\"findcontact\">Find contacts by name</label>\n          <StyledInput\n            debounceTimeout={300}\n            id=\"findcontact\"\n            placeholder=\"Search...\"\n            name=\"vidibleContacts\"\n            type=\"text\"\n            onChange={({ target }) => {\n              dispatch(filterContact(target.value));\n              setFieldValue('vidibleContacts', target.value);\n            }}\n            value={values.vidibleContacts}\n          />\n        </StyledForm>\n      )}\n    </Formik>\n  );\n}\n\nexport default Filter;\n","import { Formik, Field } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  VStack,\n  useDisclosure,\n} from '@chakra-ui/react';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n} from '@chakra-ui/react';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContactsState } from 'redux/contacts/selectors';\n\nexport const NewContactBtn = () => {\n  const dispatch = useDispatch();\n  const { isLoading } = useSelector(selectContactsState);\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(\n      addContact({\n        name: values.name,\n        number: values.number,\n      })\n    );\n    resetForm();\n    onClose();\n  };\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  return (\n    <>\n      {isLoading && <p>Loading...</p>}\n      <Button colorScheme=\"blue\" onClick={onOpen}>\n        Create contact\n      </Button>\n\n      <Modal isOpen={isOpen} onClose={onClose} isCentered size=\"sm\">\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Create new contact</ModalHeader>\n          <ModalCloseButton />\n\n          <ModalBody>\n            <Flex bg=\"gray.100\" align=\"center\" justify=\"center\" h=\"65vh\">\n              <Box bg=\"white\" p={8} rounded={4} w=\"50vh\">\n                <Formik initialValues={initialValues} onSubmit={handleSubmit}>\n                  {({ handleSubmit, errors, touched }) => (\n                    <form onSubmit={handleSubmit}>\n                      <VStack spacing={4} align=\"flex-start\">\n                        <FormControl isInvalid={!!errors.name && touched.name}>\n                          <FormLabel htmlFor=\"name\">Name</FormLabel>\n                          <Field\n                            as={Input}\n                            id=\"name\"\n                            name=\"name\"\n                            type=\"name\"\n                            variant=\"filled\"\n                            validate={value => {\n                              let error;\n\n                              if (value.length < 4) {\n                                error =\n                                  'Name must contain at least 4 characters';\n                              }\n\n                              return error;\n                            }}\n                          />\n                        </FormControl>\n                        <FormControl\n                          isInvalid={!!errors.number && touched.number}\n                        >\n                          <FormLabel htmlFor=\"number\">Number</FormLabel>\n                          <Field\n                            as={Input}\n                            id=\"number\"\n                            name=\"number\"\n                            type=\"number\"\n                            variant=\"filled\"\n                            validate={value => {\n                              let error;\n\n                              if (value.length < 6) {\n                                error =\n                                  'Number must contain at least 6 characters';\n                              }\n\n                              return error;\n                            }}\n                          />\n                          <FormErrorMessage>{errors.password}</FormErrorMessage>\n                        </FormControl>\n                        <Button type=\"submit\" colorScheme=\"blue\" width=\"full\">\n                          Create\n                        </Button>\n                      </VStack>\n                    </form>\n                  )}\n                </Formik>\n              </Box>\n            </Flex>\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n","import styled from '@emotion/styled';\nimport { displayFlex } from 'utils/display-flex';\n\nexport const StyledSection = styled.section`\n  ${displayFlex}\n  gap: 20px;\n`;","import { Helmet } from 'react-helmet';\nimport Contacts from 'components/Contacts/Contacts';\nimport Filter from 'components/Filter/Filter';\nimport { NewContactBtn } from 'components/NewContactBtn/NewContactBtn';\nimport { StyledSection } from './Contacts.styled';\n\nexport default function ContactsPage() {\n  return (\n    <StyledSection>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n      <NewContactBtn/>\n      <Filter />\n      <Contacts />\n    </StyledSection>\n  );\n};\n"],"names":["displayFlex","css","StyledSection","styled","StyledChangeBtn","props","viewBox","fill","height","width","d","fillRule","stroke","strokeLinecap","strokeLinejoin","selectContactsState","state","contacts","selectFilterState","filters","ModalChange","dispatch","useDispatch","useState","id","useDisclosure","isOpen","onOpen","onClose","useEffect","initialValues","name","number","isCentered","size","bg","align","justify","h","p","rounded","w","onSubmit","values","resetForm","updateContact","unwrap","then","Notify","catch","error","handleSubmit","errors","touched","spacing","isInvalid","htmlFor","as","Input","type","variant","validate","value","length","password","colorScheme","isOpenModal","setIsOpenModal","setId","setName","setNumber","useSelector","items","isLoading","filter","visibaleContact","item","toLowerCase","includes","getContact","onChangeContact","Tr","Th","map","Td","onClick","deleteContact","onDeleteContact","modalClose","StyledForm","Form","StyledInput","DebounceInput","vidibleContacts","setFieldValue","debounceTimeout","placeholder","onChange","target","filterContact","NewContactBtn","addContact","ContactsPage","Helmet"],"sourceRoot":""}